{"name":"Jquery Tags Input with Validation","tagline":"Magically convert a simple text input into a cool tag list with this jQuery plugin. Now with validation","body":"# Customized by @mrhieu\r\nHi,\r\nI like this plugin a lot but in one of my projects, I need to validate email address for each tags. Now it provides:\r\n- Validate input tag with a given Regex pattern (for Email address, phone number, etc)\r\n\r\nMany thanks to its author. Great job !\r\n\r\n## Easy to use\r\nIt's just a new option \"pattern\"\r\n\r\n\tvar yourRegex = /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/;// Email address\r\n\t$('#tags').tagsInput({\r\n\t\twidth: 'auto',\r\n\t\tpattern: yourRegex // default: false\r\n\t});\r\n\r\nSee more in example.html or [View Demo](http://mrhieu.github.io/jQuery-Tags-Input-with-Validation/demo)\r\n\r\n# jQuery Tags Input Plugin \r\n\r\nDo you use tags to organize content on your site? \r\nThis plugin will turn your boring tag list into a \r\nmagical input that turns each tag into a style-able \r\nobject with its own delete link. The plugin handles \r\nall the data - your form just sees a comma-delimited \r\nlist of tags!\r\n\r\n[Get it from Github](https://github.com/xoxco/jQuery-Tags-Input)\r\n\r\n[View Demo](http://xoxco.com/projects/code/tagsinput/)\r\n\r\n[Test it yourself using this jsFiddle Demo](http://jsfiddle.net/7aDak/)\r\n\r\nCreated by [XOXCO](http://xoxco.com)\r\n\r\n\r\n## Instructions\r\n\r\nFirst, add the Javascript and CSS files to your <head> tag:\r\n\r\n\t<script src=\"jquery.tagsinput.js\"></script>\r\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"jquery.tagsinput.css\" />\r\n\r\nCreate a real input in your form that will contain a comma-separated list of \r\ntags. You can put any default or existing tags in the value attribute, and \r\nthey'll be handled properly.\r\n\r\n\t<input name=\"tags\" id=\"tags\" value=\"foo,bar,baz\" />\r\n\r\nThen, simply call the tagsInput function on any field that should be treated as\r\na list of tags.\r\n\r\n\t$('#tags').tagsInput();\r\n\r\nIf you want to use jQuery.autocomplete, you can pass in a parameter with the \r\nautocomplete url.\r\n\r\n\t$('#tags').tagsInput({\r\n\t  autocomplete_url:'http://myserver.com/api/autocomplete'\r\n\t});\r\n\r\nIf you're using the bassistance jQuery.autocomplete, which takes extra \r\nparameters, you can also send in options to the autocomplete plugin, as \r\ndescribed here.\r\n\r\n\t$('#tags').tagsInput({    \r\n\t  autocomplete_url:'http://myserver.com/api/autocomplete',\r\n\t  autocomplete:{selectFirst:true,width:'100px',autoFill:true}\r\n\t});\r\n\r\nYou can add and remove tags by calling the addTag() and removeTag() functions.\r\n\r\n\t$('#tags').addTag('foo');\r\n\t$('#tags').removeTag('bar');\r\n\r\nYou can import a list of tags using the importTags() function...\r\n\r\n\t$('#tags').importTags('foo,bar,baz');\r\n\r\nYou can also use importTags() to reset the tag list...\r\n\r\n\t$('#tags').importTags('');\r\n\r\nAnd you can check if a tag exists using tagExist()...\r\n\r\n\tif ($('#tags').tagExist('foo')) { ... }\r\n\r\nIf additional functionality is required when a tag is added or removed, you may\r\nspecify callback functions via the onAddTag and onRemoveTag parameters.  Both \r\nfunctions should accept a single tag as the parameter.\r\n\r\nIf you do not want to provide a way to add tags, or you would prefer to provide \r\nan alternate interface for adding tags to the box, you may pass an false into \r\nthe optional 'interactive' parameter. The tags will still be rendered as per \r\nusual, and the addTag and removeTag functions will operate as expected.   \r\n\r\nIf you want a function to be called every time a tag is updated/deleted, set it\r\nas the 'onChange' option.\r\n\r\nBy default, if the cursor is immediately after a tag, hitting backspace will \r\ndelete that tag. If you want to override this, set the 'removeWithBackspace' \r\noption to false.\r\n\r\n## Options\r\n\r\n\t$(selector).tagsInput({\r\n\t   'autocomplete_url': url_to_autocomplete_api,\r\n\t   'autocomplete': { option: value, option: value},\r\n\t   'height':'100px',\r\n\t   'width':'300px',\r\n\t   'interactive':true,\r\n\t   'defaultText':'add a tag',\r\n\t   'onAddTag':callback_function,\r\n\t   'onRemoveTag':callback_function,\r\n\t   'onChange' : callback_function,\r\n\t   'removeWithBackspace' : true,\r\n\t   'minChars' : 0,\r\n\t   'maxChars' : 0 //if not provided there is no limit,\r\n\t   'placeholderColor' : '#666666'\r\n\t});\r\n","google":"UA-26188758-8","note":"Don't delete this file! It's used internally to help with page regeneration."}